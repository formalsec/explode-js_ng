import { runInjectionExploit } from '../src/exploitRunner';
import { runPrototypePollutionExploit } from '../src/exploitRunner';
import { runPathTraversalExploit } from '../src/exploitRunner';
import { Package } from '../src/package';
import path from 'path';
import fs from 'fs';

describe('runInjectionExploit', () => {
  
  it('returns ExploitResult when code writes a .txt file', () => {
    const code = `require('fs').writeFileSync('payload.txt', 'injected');`;
    const result = runInjectionExploit(code);

    expect(result.type).toBe('ExploitResult');
  });

  it('returns ExploitResult when code writes a file withtout extension', () => {
    const code = `require('fs').writeFileSync('payload', 'injected');`;
    const result = runInjectionExploit(code);

    expect(result.type).toBe('ExploitResult');
  });


  it('returns RuntimeErrorResult for crashing code', () => {
    const code = `throw new Error("boom")`;
    const result = runInjectionExploit(code);

    expect(result.type).toBe('RuntimeErrorResult');
  });
 
  it('returns UnsuccessfulRun if nothing happens', () => {
    const code = `console.log("no-op");`;
    const result = runInjectionExploit(code);

    expect(result.type).toBe('UnsuccessfulRunResult');
  });

  it('detects injection when executed by a required function', () => {
        // console.log('===================================TEST===============================================');
 
        const code = 'require("/home/gc/Desktop/MEIC/ano-2/tese/explode-js_ng/llm-interaction/tests/data/injection.js")();';
        //const relativeToRoot = './' + path.relative(process.cwd(), absolutePath).replace(/\\/g, '/');
        //const code = `require(`${absolutePath}`)();`;

        const result = runInjectionExploit(code);
        //console.log(result);
        //console.log(result);
        expect(result.type).toBe('ExploitResult');
  });

});


describe('runPrototypePollutionExploit', () => {
    
     it('detects simple key pollution', () => {
        const code = `Object.prototype.polluted = true;`;
        const result = runPrototypePollutionExploit(code);
        //console.log(result);
        expect(result.type).toBe('ExploitResult');
    });

    it('detects simple key pollution when execute by a required function', () => {
       // console.log('TEST cwd:', process.cwd());
 
        const code = 'require("/home/gc/Desktop/MEIC/ano-2/tese/explode-js_ng/llm-interaction/tests/data/prototype-pollution.js")();';
        //const relativeToRoot = './' + path.relative(process.cwd(), absolutePath).replace(/\\/g, '/');
        //const code = `require(`${absolutePath}`)();`;

        const result = runPrototypePollutionExploit(code);
        //console.log(result);
        expect(result.type).toBe('ExploitResult');
    });

   
    it('detects modification of existing primitive prototype key', () => {
        const code = `Object.prototype.toString = 'polluted';`;
        const result = runPrototypePollutionExploit(code);
        expect(result.type).toBe('ExploitResult');
    });

    it('ignores non-polluting code', () => {
        const code = `console.log("no pollution here");`;
        const result = runPrototypePollutionExploit(code);
        expect(result.type).toBe('UnsuccessfulRunResult');
    });
    
    it('returns RuntimeErrorResult on thrown error', () => {
        const code = `throw new Error("boom");`;
        const result = runPrototypePollutionExploit(code);
        expect(result.type).toBe('RuntimeErrorResult');
    });
 
    it('detects multiple pollutions at once', () => {
        const code = `
            Object.prototype.a = "A";
            Object.prototype.b = "B";
            Object.prototype.c = "C";
        `;
        const result = runPrototypePollutionExploit(code);
        expect(result.type).toBe('ExploitResult');
    });
    
    it('cleans up correctly between executions', () => {
        const pollutionCode = `Object.prototype.p = "polluted";`;
        const cleanCode = `if ("p" in Object.prototype) throw new Error("Residual");`;

        const result1 = runPrototypePollutionExploit(pollutionCode);
        expect(result1.type).toBe('ExploitResult');

        const result2 = runPrototypePollutionExploit(cleanCode);
        expect(result2.type).toBe('UnsuccessfulRunResult');
    });
});



describe('runPathTraversalExploit', () => {
    const dummyPkg = new Package("src", "sink", "dummy/path.js", "CWE-22");

    const dummyPkgServer = new Package("src", "sink", "dummy/path.js", "CWE-22", ["./data/path-traversal-server.js&"]);
    /*
    it('returns ExploitResult when fs writes outside allowed dir', () => {
        const code = `const fs = require("fs");fs.writeFileSync('../traverse.txt', 'pwned');`;
        const result = runPathTraversalExploit(code, dummyPkg);
        
       // console.log(result);
        expect(result.type).toBe('ExploitResult');
    });

    it('returns ExploitResult when a required function writes outside allowed dir', () => {
        const code = `require("/home/gc/Desktop/MEIC/ano-2/tese/explode-js_ng/llm-interaction/tests/data/path-traversal.js")();`;
        const result = runPathTraversalExploit(code,dummyPkg);
        //console.log(result);

        expect(result.type).toBe('ExploitResult');
    });

    it('returns RuntimeErrorResult for crashing code', () => {
        const code = `throw new Error("boom")`;
        const result = runPathTraversalExploit(code, dummyPkg);

        expect(result.type).toBe('RuntimeErrorResult');
    });

    it('returns ExploitResult when reading a file outside uploads dir', () => {
        const code = `const fs = require('fs');fs.readFileSync('/../../../../../../../../../../../../../../../etc/passwd', 'utf8');`;
        const result = runPathTraversalExploit(code, dummyPkg);

        expect(result.type).toBe('ExploitResult');
    });*/
    
    it('returns ExploitResult when sending request to server', () => {
        const code = fs.readFileSync("./data/path-traversal-client.js", 'utf8');
        const result = runPathTraversalExploit(code, dummyPkgServer);
        console.log(result);
        expect(result.type).toBe('ExploitResult');
    });


 });

